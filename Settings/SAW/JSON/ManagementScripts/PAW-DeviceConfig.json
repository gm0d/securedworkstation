{
    "@odata.context": "https://graph.microsoft.com/beta/$metadata#deviceManagement/deviceManagementScripts/$entity",
    "enforceSignatureCheck": false,
    "runAs32Bit": true,
    "id": "88f6cd65-4426-41f3-b784-379322627d7f",
    "displayName": "SAW Device config script",
    "description": "SAW Device config script",
    "scriptContent": "",
    "createdDateTime": "2021-10-28T23:44:09.9213578Z",
    "lastModifiedDateTime": "2021-10-28T23:44:09.9213578Z",
    "runAsAccount": "system",
    "fileName": "SAW-DeviceConfig.ps1",
    "roleScopeTagIds": [],
    "assignments": [
        "Secure-Workstations"
    ]
}